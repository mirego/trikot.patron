plugins {
    id 'com.android.library'
    id 'kotlin-multiplatform'
    id 'kotlinx-serialization'
    id 'org.jlleitschuh.gradle.ktlint'
    id 'mirego.kword' version '0.5'
}

repositories {
    google()
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://jitpack.io' }
    maven { url('https://s3.amazonaws.com/mirego-maven/public') }
}

group 'com.trikot.sample'

apply plugin: 'maven-publish'

def iosArchLibrarySuffix = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? "iosarm64" : "iosx64"

android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 21
    }
    sourceSets {
        main.resources.srcDir('src/commonMain/resources/')
    }
    testOptions {
        unitTests.returnDefaultValues = true
        unitTests.includeAndroidResources = true
    }
}

kword {
    translationFile 'src/commonMain/resources/translations/translation.en.json'
    enumClassName 'com.trikot.sample.localization.KWordTranslation'
    generatedDir 'src/commonMain/generated'
}

kotlin {
    targets {
        fromPreset(presets.android, 'android')
        fromPreset(presets.js, 'js')

        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos") ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework {
                    embedBitcode("disable")
                    baseName = "$trikot_framework_name"
                    export "com.mirego.trikot:trikotFoundation:$trikot_foundation_version"
                    export "com.mirego.trikot:trikotFoundation-$iosArchLibrarySuffix:$trikot_foundation_version"
                    export "com.mirego.trikot:streams:$trikot_streams_version"
                    export "com.mirego.trikot:streams-$iosArchLibrarySuffix:$trikot_streams_version"
                    export "com.mirego.trikot:viewmodels:$trikot_viewmodels_version"
                    export "com.mirego.trikot:viewmodels-$iosArchLibrarySuffix:$trikot_viewmodels_version"
                    export "com.mirego.trikot:http:$trikot_http_version"
                    export "com.mirego.trikot:http-$iosArchLibrarySuffix:$trikot_http_version"
                    export "com.mirego.trikot:kword:$trikot_kword_version"
                    export "com.mirego.trikot:kword-$iosArchLibrarySuffix:$trikot_kword_version"
                }
            }
        }
    }

    android {
        publishLibraryVariants('release', 'debug')
    }

    sourceSets {
        all {
            languageSettings {
                useExperimentalAnnotation('kotlin.Experimental')
                useExperimentalAnnotation('kotlin.time.ExperimentalTime')
            }
        }
        commonMain {
            dependencies {
                api "com.mirego.trikot:trikotFoundation:$trikot_foundation_version"
                api "com.mirego.trikot:streams:$trikot_streams_version"
                api "com.mirego.trikot:viewmodels:$trikot_viewmodels_version"
                api "com.mirego.trikot:http:$trikot_http_version"
                api "com.mirego.trikot:kword:$trikot_kword_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:$serialization_version"
            }
            kotlin.srcDir(kword.generatedDir)
        }
        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
                implementation "io.mockk:mockk-common:$mokk_version"
            }
        }
        androidMain {
            dependencies {
                implementation "com.mirego.trikot.viewmodels:android-ktx:$trikot_viewmodels_android_ktx_version"
                implementation "com.mirego.trikot.http:android-ktx:$trikot_http_android_ktx_version"
                implementation "com.mirego.trikot.kword:android-ktx:$trikot_kword_android_ktx_version"
                implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
                implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
            }
            dependsOn commonMain
        }
        androidTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test'
                implementation 'org.jetbrains.kotlin:kotlin-test-junit'
                implementation "io.mockk:mockk:$mokk_version"
            }
        }

        jsMain {
            dependsOn commonMain
        }

        iosMain {
            dependsOn commonMain
        }
    }
}

// This task attaches native framework built from ios module to Xcode project
// (see iosApp directory). Don't run this task directly,
// Xcode runs this task itself during its build process.
// Before opening the project from iosApp directory in Xcode,
// make sure all Gradle infrastructure exists (gradle.wrapper, gradlew).
task copyFramework() {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"

    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def frameworkFilename = "${trikot_framework_name}.framework"
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = file("build/bin/ios").toString()
        def frameworkDir = "${targetDir}/${frameworkFilename}"
        def translationDir = "${projectDir}/../common/src/commonMain/resources/translations"
        copy {
            from srcFile.parent
            into targetDir
            include "${frameworkFilename}/**"
            include "${frameworkFilename}.dSYM/**"
        }
        copy {
            from translationDir
            into frameworkDir
            include "**"
        }
    }
}

tasks.findAll { it.name.startsWith('preBuild') }.each { it.dependsOn('kwordGenerateEnum') }
